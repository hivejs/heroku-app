#!/usr/bin/env node
/**
 * hive.js
 * Copyright (C) 2013-2016 Marcel Klehr <mklehr@gmx.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Mozilla Public License version 2
 * as published by the Mozilla Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the Mozilla Public License
 * along with this program.  If not, see <https://www.mozilla.org/en-US/MPL/2.0/>.
 */

/**
 * This is the hive-init global subcommand
 * it will set-up a hive instance directory for you.
 */

var co = require('co')
  , inquirer = require("inquirer")
  , fs = require('fs')
  , winFork = require('win-fork')

var deps = {
  'hive-core': '0.8.x'
, 'hive-interface-rest-api': '0.8.x'
, 'hive-interface-stream': '0.8.x'
, 'engine.io': '1.x'
, 'hive-ui': '0.8.x'
, 'gulf': '4.x'
}

var dbConfigTemplates = {
  'sails-postgresql': {
    database: 'databaseName',
    host: 'localhost',
    user: 'root',
    password: '',
    port: 5432,
    poolSize: 10,
    ssl: false
  },
  'sails-mysql': {
    host      : 'localhost',
    port      : 3306,
    user      : 'username',
    password  : 'password',
    database  : 'MySQL Database Name'
  },
  'sails-mongo': {
    host: 'localhost',
    port: 27017,
    user: 'username_here',
    password: 'password_here',
    database: 'database_name_here'
  },
  'sails-redis': {
    port: 6379,
    host: 'localhost',
    password: null,
    database: null
  },
  'sails-disk': {},
  'sails-memory': {}
}

co(function *() {
  var indent = '  '

  const firstRun = !isExistingInstance()

  if(!firstRun && !(yield confirm('There is already a hive instance in this directory. Continue anyway?'))) {
    console.log('Aborting.')
    return
  }


  console.log('Set up your hive instance. The following steps will be taken:')
  console.log('0) Your choices 1) Create package.json, 2) Install hive components, 3) Set up config files.')



console.log('\n0) Enter your choices for the new hive instance')

  var db = yield select('Choose a database adapter',
  [ 'sails-postgresql'
  , 'sails-mysql'
  , 'sails-mongo'
  , 'sails-redis'
  , 'sails-disk'
  , 'sails-memory'
  ])
  deps[db] = '*'

  var dbConfig = dbConfigTemplates[db]
  for(var key in dbConfig) {
    dbConfig[key] = yield input('Enter '+key, dbConfig[key])
  }
  dbConfig.adapter = db

  var broadcast = yield select('Choose a broadcast transport', [
    'hive-broadcast-memory'
  , 'hive-broadcast-smokesignal'
  ])
  deps[broadcast] = '*'

  var editors = yield multipleChoice('Choose the editors you want to install',[
    'hive-editor-text-textarea'
  , 'hive-editor-text-codemirror'
  , 'hive-editor-html-ckeditor'
  , 'hive-editor-svg-method-draw'
  ])
  editors.forEach(function(editor) {
    deps[editor] = '*'
  })




console.log('\n1) Create package.json')

  if(firstRun || (yield confirm('Should I write package.json?'))) {
    var packageJson = {
      name: 'Hive.js'
    , version: '0.1.0'
    , description: 'Your hive.js instance'
    , dependencies: deps
    , private: true
    , hive: true
    }

    console.log(indent+'Writing package.json...')
    fs.writeFileSync(process.cwd()+'/package.json', JSON.stringify(packageJson, null, '  '))

    console.log(indent+'✔')
  }



console.log('\n2) Set up config files')

  if(firstRun || (yield confirm('Should I write the configuration files?'))) {

    var config = {
      ui: {
        baseURL: 'http://localhost:1235'
      , debug: false
      },
      http: {
        port: 1235
      },
      interfaceStream: {
        transport: 'engine.io'
      },
      orm: {
        adapters: [db]
      , connections: {default: dbConfig}
      },
      authToken: {
        secret: 'sssh'
      },
      queue: {
        port: 12351
      , address: "127.0.0.1"
      },
      logger: {
        appenders: [
          { type: "console" }
        ]
      }
    }

    if(broadcast === 'hive-broadcast-smokesignal') {
      config['broadcast-smokesignal'] = {
        "networkMask": "192.168.2.1/255.255.255.0"
      , "port": 12352
      , "seeds": [
          {"address":"192.168.2.100", "port":12352}
        ]
      }
    }

    var configdir = process.cwd()+'/config'
    fs.mkdirSync(configdir)
    ;['development', 'test', 'production']
      .forEach(function(env) {
        fs.writeFileSync(configdir+'/'+env+'.json', JSON.stringify({}, null, '  '))
        console.log(indent+'- config/'+env+'.json')
      })

    fs.writeFileSync(configdir+'/default.json', JSON.stringify(config, null, '  '))
    console.log(indent+'- config/default.json')

    console.log(indent+'✔')

  }


  console.log('\n3) Install hive components')

  if(firstRun || (yield confirm('Should I install the necessary hive components?'))) {
    console.log(indent+'installing the following components...\n', packageJson.dependencies)

    var exitCode = yield spawn('npm', ['update', '--loglevel=warn'], {
      stdio: 'inherit'
    , cwd: process.cwd()
    , env: process.env
    , detached: false
    })

    if(exitCode != 0) {
      console.log('\n'+indent+'Mh. npm seems to have failed. Make sure your network connection is ok and run `npm install` again.')
      process.exit(1)
    }else {
      console.log(indent+'✔')
    }
  }

  console.log('\nMission complete.')
})
.then(function() {process.exit()})
.catch(function(er) {
  throw er;
})

function confirm(message) {
  return function(cb) {
    inquirer.prompt([
      { type: 'confirm'
      , name: 'mylist'
      , message: message
      , 'default': true
      }
    ], function(answers) {
      cb(null, answers.mylist)
    })
  }
}

function input(message, defaultVal) {
  return function(cb) {
    inquirer.prompt([
      { type: 'input'
      , name: 'mylist'
      , message: message
      , 'default': defaultVal
      }
    ], function(answers) {
      cb(null, answers.mylist)
    })
  }
}

function select(message, list) {
  return function(cb) {
    inquirer.prompt([
      { type: 'list'
      , name: 'mylist'
      , message: message
      , choices: list
      }
    ], function(answers) {
      cb(null, answers.mylist)
    })
  }
}

function multipleChoice(message, list) {
  return function(cb) {
    inquirer.prompt([
      { type: 'checkbox'
      , name: 'mylist'
      , message: message
      , choices: list
      }
    ], function(answers) {
      cb(null, answers.mylist)
    })
  }
}

function spawn(cmd, args, opts) {
  return function(cb) {
    winFork(cmd, args, opts)
      .on('error', function(er) {
        cb(er)
      })
      .on('close', function(code) {
        cb(null, code)
      })
  }
}

function isExistingInstance() {
  try {
    var pack = require(process.cwd()+'/package.json')
    return pack.hive
  }catch(e) {
    return false
  }
}
