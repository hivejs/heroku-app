'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cookie = undefined;

var _componentCookie = require('component-cookie');

var _componentCookie2 = _interopRequireDefault(_componentCookie);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Action types
 */

var GET_COOKIE = 'EFFECT_GET_COOKIE'; /**
                                       * Imports
                                       */

var SET_COOKIE = 'EFFECT_SET_COOKIE';

/**
 * Cookie middleware
 */

function cookieMiddleware(cookieMap) {
  var cookie = cookieMap ? map(cookieMap) : _componentCookie2.default;

  return function (_ref) {
    var dispatch = _ref.dispatch;
    var getState = _ref.getState;
    return function (next) {
      return function (action) {
        return action.type === GET_COOKIE || action.type === SET_COOKIE ? Promise.resolve(handle(cookie, action)) : next(action);
      };
    };
  };
}

/**
 * Handle a cookie effect
 */

function handle(cookie, action) {
  var _action$payload = action.payload;
  var name = _action$payload.name;
  var value = _action$payload.value;
  var opts = _action$payload.opts;

  switch (action.type) {
    case SET_COOKIE:
      return cookie(name, value, opts);
    case GET_COOKIE:
      return cookie(name);
  }
}

/**
 * Use a plain object as the source of cookie data
 * (e.g. if we're on the server)
 */

function map(cookieMap) {
  return function (name, value) {
    if (arguments.length > 1) {
      cookieMap[name] = value;
    }

    return cookieMap[name];
  };
}

/**
 * Action creator
 */

function cookie(name, value) {
  var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  return arguments.length > 1 ? { type: SET_COOKIE, payload: { name: name, value: value, opts: opts } } : { type: GET_COOKIE, payload: { name: name } };
}

/**
 * Exports
 */

exports.default = cookieMiddleware;
exports.cookie = cookie;