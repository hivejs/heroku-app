{
  "_args": [
    [
      "p2p-rpc-stream@*",
      "/home/marcel/dev/hivejs/heroku-app/node_modules/umbilical"
    ]
  ],
  "_from": "p2p-rpc-stream@*",
  "_id": "p2p-rpc-stream@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/p2p-rpc-stream",
  "_npmUser": {
    "email": "mklehr@gmx.net",
    "name": "marcelklehr"
  },
  "_npmVersion": "1.3.15",
  "_phantomChildren": {},
  "_requested": {
    "name": "p2p-rpc-stream",
    "raw": "p2p-rpc-stream@*",
    "rawSpec": "*",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/umbilical"
  ],
  "_resolved": "https://registry.npmjs.org/p2p-rpc-stream/-/p2p-rpc-stream-0.1.1.tgz",
  "_shasum": "e8392d539bfa19b1157a20c5205673a5203c21b9",
  "_shrinkwrap": null,
  "_spec": "p2p-rpc-stream@*",
  "_where": "/home/marcel/dev/hivejs/heroku-app/node_modules/umbilical",
  "author": {
    "email": "mklehr@gmx.net",
    "name": "Marcel Klehr"
  },
  "bugs": {
    "url": "https://github.com/marcelklehr/p2p-rpc-stream/issues"
  },
  "dependencies": {
    "json-stream": "*",
    "through": "*"
  },
  "description": "rpc streams with client/server or between peers (both sides act as client & server)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "e8392d539bfa19b1157a20c5205673a5203c21b9",
    "tarball": "http://registry.npmjs.org/p2p-rpc-stream/-/p2p-rpc-stream-0.1.1.tgz"
  },
  "homepage": "https://github.com/marcelklehr/p2p-rpc-stream",
  "keywords": [
    "rpc",
    "stream",
    "remote procedure call",
    "json-rpc",
    "p2p",
    "peer-to-peer"
  ],
  "maintainers": [
    {
      "email": "mklehr@gmx.net",
      "name": "marcelklehr"
    }
  ],
  "name": "p2p-rpc-stream",
  "optionalDependencies": {},
  "readme": "p2p-rpc-stream\r\n==============\r\n\r\nTransport-agnostic RPC libraries utilizing node streams have already become [quite](http://andreypopp.github.io/stream-rpc/) [popular](https://github.com/dominictarr/rpc-stream). In my opinion, there is still a problem, though: What if I need to call methods from both ends? Create tow tcp servers? Ugly.\r\n\r\nThis little library provides RPC streams that you can use to do traditional client/server or to communicate between peers (both sides act as client & server).\r\n\r\n```js\r\nvar rpc = require('p2p-rpc-stream')\r\n  , net = require('net')\r\n\r\n\r\n// This node both\r\n// a server ...\r\n\r\nvar server = rpc.createServer({\r\n  echo: function(msg, reply) {\r\n    reply(null, msg)\r\n  },\r\n  hello: function(reply) {\r\n    reply(null, 'hello.')\r\n  }\r\n})\r\n\r\nnet.createServer(function(sock) {\r\n  var rpc_conn = server.createStream()\r\n  \r\n  // ... and a client\r\n  // at the same time!\r\n  var client = rpc.createClient(server.id) // we need to know our own server\r\n  \r\n  sock\r\n    .pipe(client) // send requests into the other direction and check for replies\r\n    .pipe(rpc_conn) // check for requests and reply to them\r\n    .pipe(sock)\r\n  \r\n  client.request('hello', function(er, res) {\r\n    if(er) throw er // will return a Timeout error after some 5secs\r\n    console.log(res)\r\n  })\r\n}).listen(3000)\r\n```\r\n\r\n```js\r\nvar rpc = require('p2p-rpc-stream')\r\n  , net = require('net')\r\n\r\nvar client = rpc.createClient()\r\n\r\nvar sock = net.connect({port: 3000}, function(sock) {\r\n  client.pipe(sock).pipe(client)\r\n})\r\n```\r\n\r\n## Install\r\n\r\n`npm install p2p-rpc-stream`\r\n\r\n### Todo\r\n\r\n* allow custom request timeouts\r\n\r\n## Legal\r\n(c) 2013 by Marcel Klehr  \r\nMIT License",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/marcelklehr/p2p-rpc-stream.git"
  },
  "version": "0.1.1"
}
