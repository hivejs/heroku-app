'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toPromise = require('to-promise');

var _toPromise2 = _interopRequireDefault(_toPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Map
 * @param  {Function} p Calls p once for each item produced by `it`. P can be a thunk.
 * @param  {Function|Generator} it Produces items.
 * @param  {Any} ...args Arguments for it.
 * @return {Promise}
 */

function map(p, it) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return new Promise(function (resolve, reject) {
    if (isFunction(it)) {
      it = it.apply(undefined, args);
    }
    if (!it || !isFunction(it.next)) return resolve(it);

    var onFulfilled = iter('next');
    var onRejected = iter('throw');

    onFulfilled();

    function next(ret) {
      if (ret.done) return resolve(ret.value);
      (0, _toPromise2.default)(p(ret.value)).then(onFulfilled, onRejected);
    }

    function iter(attr) {
      return function (res) {
        var ret;
        try {
          ret = it[attr](res);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      };
    }
  });
}

/**
 * Check if value is function
 * @param  {Any}  v
 * @return {Boolean}
 */
/**
 * Imports
 */

function isFunction(v) {
  return 'function' === typeof v;
}

/**
 * Exports
 */

exports.default = map;